~~ quoteProps: asNeeded ~~
== should preserve quotes when necessary ==
const a = { "foo bar": true };
const b = { "foo\nbar": true };
const c = { "1foo": true };
const i = {
    "1foo"() {},
    get "2foo"() {},
    set "2foo"(v) {},
    async "3foo"() {},
};
class Class {
    "1foo"() {}
    get "1foo"() {}
    set "1foo"() {}
    async "3foo"() {}
    "4foo": string;
}
interface Interface {
    "1foo": string;
    "2foo"(): string;
    get "3foo"(): string;
    set "3foo"(v: string);
}
type Type = {
    "1foo": string;
    "2foo"(): string;
    get "3foo"(): string;
    set "3foo"(v: string);
};

[expect]
const a = { "foo bar": true };
const b = { "foo\nbar": true };
const c = { "1foo": true };
const i = {
    "1foo"() {},
    get "1foo"() {},
    set "1foo"(v) {},
    async "3foo"() {},
};
class Class {
    "1foo"() {}
    get "1foo"() {}
    set "1foo"() {}
    async "3foo"() {}
    "4foo": string;
}
interface Interface {
    "1foo": string;
    "2foo"(): string;
    get "4foo"(): string;
    set "4foo"(v: string);
}
type Type = {
    "1foo": string;
    "2foo"(): string;
    get "4foo"(): string;
    set "4foo"(v: string);
};

== should remove quotes when unnecessary ==
const a = { "foo": true };
const b = { "$": true };
const c = { "_": true };
const d = { "_1": true };
const e = { 'foo': true };
const f = { '$': true };
const g = { '_': true };
const h = { '_1': true };
const i = {
    "foo"() {},
    get "foo2"() {},
    set "foo2"(v) {},
    async "foo3"() {},
};
class Class {
    "foo"() {}
    get "foo2"() {}
    set "foo2"() {}
    async "foo3"() {}
    "foo4": string;
}
interface Interface {
    "foo": string;
    "foo2"(): string;
    get "foo4"(): string;
    set "foo4"(v: string);
}
type Type = {
    "foo": string;
    "foo2"(): string;
    get "foo4"(): string;
    set "foo4"(v: string);
};

[expect]
const a = { foo: true };
const b = { $: true };
const c = { _: true };
const d = { _1: true };
const e = { foo: true };
const f = { $: true };
const g = { _: true };
const h = { _1: true };
const i = {
    foo() {},
    get foo2() {},
    set foo2(v) {},
    async foo3() {},
};
class Class {
    foo() {}
    get foo2() {}
    set foo2() {}
    async foo3() {}
    foo4: string;
}
interface Interface {
    foo: string;
    foo2(): string;
    get foo4(): string;
    set foo4(v: string);
}
type Type = {
    foo: string;
    foo2(): string;
    get foo4(): string;
    set foo4(v: string);
};
